#include<iostream.h>
#include<conio.h>


class shape
{
protected:
int dim1,dim2 ;
public:
shape()
{dim1=dim2=0 ;}
shape(int m)
{dim1=dim2=m ;}
shape(int m,int n)
{dim1=m;
 dim2=n ;}
void setd1(int m)
{dim1=m ;}
void setd2(int n)
{dim2=n ;}
int getd1()
{return dim1 ;}
int getd2()
{return dim2 ;}

virtual float area()=0 ;

};

class circle:public shape
{
public:
circle(){}
circle(int r):shape(r){}
float area()
{return (3.14*dim1*dim2) ;}
};


class rectangle:public shape
{
public:
rectangle(){}
rectangle(int l,int w):shape(l,w){}
float area()
{return (1.0*dim1*dim2) ;}
};


class triangle:public shape
{
public:
triangle(){}
triangle(int b,int h):shape(b,h){}
float area()
{return (0.5*dim1*dim2) ;}
};


class square:public rectangle
{
public:
square(){}
square(int s):rectangle(s,s){}
};

class geoshape
{
shape *p[4];

public:
geoshape(shape* p1,shape* p2,shape* p3,shape* p4)
{
p[0]=p1;
p[1]=p2;
p[2]=p3;
p[3]=p4;
}

float totalarea()
{ float total=0 ;
  for(int i=0 ; i<4 ;i++)
  {total+=p[i]->area();}
  return total ;
}

};


void main()
{
circle c(7);
rectangle r(20,5);
triangle t(10,20);
square s(6);

geoshape g(&c,&r,&t,&s);
cout<<"total="<<g.totalarea()<<endl;

getch();
clrscr();
}   